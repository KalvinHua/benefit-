<?php
namespace app\bis\controller;

use phpmailer\PHPMailer;
use think\Controller;
use \app\common\validate\Business as BisValidate;
use \app\common\model\City as CityModel;
use \app\common\model\Category as CategoryModel;
use think\response\Json;


class Register extends Controller
{
    /**
     * @var city 模型对象  validate 验证器对象
     */
    private $city;
    private $category;
    private $validate;

    /**
     * 初始化
     */
    public function initialize()
    {
        parent::initialize(); // TODO: Change the autogenerated stub
        $this->city = new CityModel;
        $this->category = new CategoryModel;
        $this->validate = new BisValidate;
    }

    /**
     * 获取商户注册表单所需数据
     *
     * @return mixed
     */
    public function index()
    {
        $cities = $this->city->getFirstCity(0,true);
        $categories = $this->category->getFirstCategory(0,true);
        $this->assign(['cities'=>$cities,'categories'=>$categories]);
        return $this->fetch();
    }

    /**
     * 提交商户注册信息
     *
     */
    public function add()
    {
        if(!$this->request->isPost()){
            $this->error('请求错误');
        }
        $data = input('post.');
        //校验数据
        //基本信息校验
        if(!$this->validate->scene('business')->check($data)){
            $this->error($this->validate->getError());
        }
        if(!$this->validate->scene('store')->check($data)){
            $this->error($this->validate->getError());
        }
        if(!$this->validate->scene('account')->check($data)){
            $this->error($this->validate->getError());
        }

        //获取经纬度  map
        $lnglat=\Map::getLngLat($data['address']);
        if(empty(($lnglat)) || $lnglat['status'] != 0 || $lnglat['result']['precise']!=1){
            $this->error('无检索地址对应位置或匹配地址不精准');
        }else{
            $xpoint = empty($lnglat['result']['location']['lng'])?'':$lnglat['result']['location']['lng']; //经度
            $ypoint = empty($lnglat['result']['location']['lat'])?'':$lnglat['result']['location']['lat']; //纬度
        }

        //判断用户是否存在
        $accountResult=model('BusinessAccount')->get(['username'=>$data['username']]);
        if($accountResult){
            $this->error('该用户存在，请重新分配');
        }
        //商户基本信息入库
        $bisData = [
            'name' => $data['name'],
            'city_id' => $data['city_id'],
            'city_path' => empty($data['se_city_id']) ? $data['city_id'] : $data['city_id'] . ',' . $data['se_city_id'], //城市完整路径
            'logo' => $data['logo'],
            'licence_logo' => $data['licence_logo'],
            'description' => empty($data['description']) ? '' : $data['description'],
            'bank_info' => $data['bank_info'],
            'bank_user' => $data['bank_user'],
            'bank_name' => $data['bank_name'],
            'corporation' => $data['corporation'],
            'corporation_tel' => $data['corporation'],
            'email' => $data['email']
        ];
        $bisID = model('Business')->add($bisData);

        //总店相关信息校验
        //总店相关信息入库
        $data['cat'] = '';
        if(!empty($data['se_category_id'])){
            $data['cat'] = implode('|',$data['se_category_id']);
        }
        $storeData = [
            'business_id' => $bisID,
            'name' => $data['name'],
            'tel' => $data['tel'],
            'contact' => $data['contact'],
            'logo' => $data['logo'],
            'category_id' => $data['category_id'],
            'category_path' => empty($data['se_category_id']) ? $data['category_id'] : $data['category_id'] . ',' . $data['cat'],
            'address' => $data['address'],
            'open_time' => $data['open_time'],
            'content' => empty($data['content']) ? '' : $data['content'],
            'is_main' => 1,
            'xpoint' => $xpoint, //城市完整路径,
            'ypoint' => $ypoint, //城市完整路径,
            'city_id' => $data['city_id'],
            'city_path' => empty($data['se_city_id']) ? $data['city_id'] : $data['city_id'] . ',' . $data['se_city_id'], //城市完整路径
            'bank_info' => $data['bank_info'],
        ];
        $storeID = model('BusinessStore')->add($storeData);


        //账户相关的信息检验
        //自动生成 密码的加盐字符串
        $data['code'] = mt_rand(100,10000);
        $accountData = [
            'business_id' => $bisID,
            'username' => $data['username'],
            'code' => $data['code'],
            'password' => md5($data['password'].$data['code']),
            'is_main' => 1,
        ];

        $accountID = model('BusinessAccount') -> add($accountData);
        if(!$accountID){
            $this->error('申请失败');
        }

        //邮件链接地址
        $url = $this->request->domain().url('bis/register/waiting',['id'=>$bisID]);
        $title = 'benefit购物平台入驻申请';
        $content = "您提交的入住申请需等待平台方审核，您可以通过点击连接<a href='".$url."' target='_blank'>查看链接</a>查看审核状态";
        //发送邮件
        \PHPMailer\Email::send($data['email'],$title,$content);
        //本模块下 不需要在地址写模块名
        $this->success('申请成功',url('register/waiting',['id'=>$bisID]));
    }

    /**
     * 检验是否存在用户名
     *
     * @return mixed;
     */
    public function checkName()
    {
        $username = $this->request->param('username');
        $res=model('BusinessAccount')->get(['username'=>$username]);
        if($res){
            $this->result($_SERVER['HTTP_REFERER'],1,'存在此名称');
        }else{
            $this->result($_SERVER['HTTP_REFERER'],0,'不存在此名称');
        }
    }

    public function waiting($id)
    {
        if(empty($id)){
            $this->error('error');
        }
        $detail = model('Business')->get($id);
        return $this->fetch('',['detail' => $detail]);
    }
}